[1,["04NS6B9i9BqY7C/npXMl6v"],["root","lineHolder","node","data","effectAsset"],[["cc.Node",["_name","_prefab","_children","_components","_parent"],2,4,2,9,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["34635j2VClPxJz7bftazCTL",["node","lineHolder","effectAsset"],3,1,1,6]],[[2,0,1,2,4],[3,0,2],[0,0,2,3,1,2],[0,0,4,1,2],[4,0,1,2,1],[1,1,2,1],[1,0,1,2,2]],[[[[0,"line",[{"hash":3589166241,"record":null,"name":"line|vs|fs","glsl3":{"vert":"\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec3 a_position;\n  in vec4 a_color;\n  out vec4 v_color;\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n  void main () {\n      vec4 pos = vec4(a_position, 1);\n      #if CC_USE_MODEL\n          pos = cc_matViewProj * cc_matWorld * pos;\n      #else\n          pos = cc_matViewProj * pos;\n      #endif\n      v_color = a_color;\n      v_uv0 = a_uv0;\n      gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec2 v_uv0;\nin vec4 v_color;\nconst lowp float EPSILON = 0.0001;\nconst lowp float GLEAM_WIDTH = 0.1;\nconst lowp float GLEAM_WEIGHT = 1. + 2. * GLEAM_WIDTH;\nuniform PROPERTIES {\n  float visibility;\n  float time;\n  float smoothness;\n  float taper;\n};\nuniform sampler2D texture;\nvoid main() {\n  #if useTexture\n    vec4 o = texture2D(texture, v_uv0);\n  #else\n    vec4 o = v_color;\n  #endif\n  #if isReversed\n    float x = 1. - v_uv0.x;\n  #else\n    float x = v_uv0.x;\n  #endif\n  float t = time * GLEAM_WEIGHT - GLEAM_WIDTH;\n  float v = visibility * GLEAM_WEIGHT - GLEAM_WIDTH;\n  o.rgb += (1. - smoothstep(0., GLEAM_WIDTH, abs(t - x)));\n  #if usePremultiplyAlpha\n    o *= step(max(EPSILON, x), v);\n  #else\n    o.a *= step(max(EPSILON, x), v);\n  #endif\n  #if (useSmoothing || useTaper)\n    float y = abs(v_uv0.y - 0.5);\n    #if useSmoothing\n      #if usePremultiplyAlpha\n        o *= 1. - smoothstep(smoothness, 1., y);\n      #else\n        o.a *= 1. - smoothstep(smoothness, 1., y);\n      #endif\n    #endif\n    #if useTaper\n      x = 1. - abs(x - 0.5) * 2.;\n      #if usePremultiplyAlpha\n        o.a *= smoothstep(0., taper, x * (1. - y));\n      #else\n        o *= smoothstep(0., taper, x * (1. - y));\n      #endif\n    #endif\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\n  precision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n  attribute vec3 a_position;\n  attribute vec4 a_color;\n  varying vec4 v_color;\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n  void main () {\n      vec4 pos = vec4(a_position, 1);\n      #if CC_USE_MODEL\n          pos = cc_matViewProj * cc_matWorld * pos;\n      #else\n          pos = cc_matViewProj * pos;\n      #endif\n      v_color = a_color;\n      v_uv0 = a_uv0;\n      gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nconst lowp float EPSILON = 0.0001;\nconst lowp float GLEAM_WIDTH = 0.1;\nconst lowp float GLEAM_WEIGHT = 1. + 2. * GLEAM_WIDTH;\nuniform float visibility;\nuniform float time;\nuniform float smoothness;\nuniform float taper;\nuniform sampler2D texture;\nvoid main() {\n  #if useTexture\n    vec4 o = texture2D(texture, v_uv0);\n  #else\n    vec4 o = v_color;\n  #endif\n  #if isReversed\n    float x = 1. - v_uv0.x;\n  #else\n    float x = v_uv0.x;\n  #endif\n  float t = time * GLEAM_WEIGHT - GLEAM_WIDTH;\n  float v = visibility * GLEAM_WEIGHT - GLEAM_WIDTH;\n  o.rgb += (1. - smoothstep(0., GLEAM_WIDTH, abs(t - x)));\n  #if usePremultiplyAlpha\n    o *= step(max(EPSILON, x), v);\n  #else\n    o.a *= step(max(EPSILON, x), v);\n  #endif\n  #if (useSmoothing || useTaper)\n    float y = abs(v_uv0.y - 0.5);\n    #if useSmoothing\n      #if usePremultiplyAlpha\n        o *= 1. - smoothstep(smoothness, 1., y);\n      #else\n        o.a *= 1. - smoothstep(smoothness, 1., y);\n      #endif\n    #endif\n    #if useTaper\n      x = 1. - abs(x - 0.5) * 2.;\n      #if usePremultiplyAlpha\n        o.a *= smoothstep(0., taper, x * (1. - y));\n      #else\n        o *= smoothstep(0., taper, x * (1. - y));\n      #endif\n    #endif\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"useTexture","type":"boolean","defines":[]},{"name":"isReversed","type":"boolean","defines":[]},{"name":"usePremultiplyAlpha","type":"boolean","defines":[]},{"name":"useSmoothing","type":"boolean","defines":[]},{"name":"useTaper","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PROPERTIES","binding":1,"members":[{"name":"visibility","type":13,"count":1},{"name":"time","type":13,"count":1},{"name":"smoothness","type":13,"count":1},{"name":"taper","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"line|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0,"properties":{"texture":{"value":"white"},"visibility":{"value":0},"time":{"value":0},"smoothness":{"value":0},"taper":{"value":0}}}}]}]]],0,0,[],[],[]],[[[1,"pay_line_controller"],[2,"pay_line_controller",[-4],[[4,-3,-2,0]],[5,-1,0]],[3,"line_holder",1,[6,"ddtEMCCxdPx7z2Gzt5hoWI",1,0]]],0,[0,0,1,0,1,2,0,2,1,0,-1,2,0,3,1,4],[0],[4],[0]]]]